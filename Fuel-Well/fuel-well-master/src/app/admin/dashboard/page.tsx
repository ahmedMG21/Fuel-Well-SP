'use client';
import { Admin, Resource, ListGuesser, EditGuesser, ShowGuesser, defaultTheme, TopToolbar, AppBar, useLogout, UserMenu, AddItemButton,Create, GetOneParams } from 'react-admin';
import jsonServerProvider from 'ra-data-json-server';
import Cookies from 'universal-cookie';
import { useEffect, useState } from 'react';
import indigo from '@mui/material/colors/indigo';
import pink from '@mui/material/colors/pink';
import red from '@mui/material/colors/red';
import { Button } from '@mui/material';
import Link from 'next/link';
import './page.css'
import MyLayout from './adminComponents/myLayout';
import { getFirestore, collection, getDocs, addDoc, doc, updateDoc, deleteDoc, getDoc } from 'firebase/firestore';
import {getStorage, ref, uploadBytes, getDownloadURL} from "firebase/storage";
import  app  from '../../../../firebase';
import {ProductCreate} from './adminComponents/productCreate';
import { ProductList } from './adminComponents/productList';
import { metadata } from '@/app/layout';
import { cyan } from '@mui/material/colors';
import { fileURLToPath } from 'url';
// interface CookieProps {
//   admin?: string; // Define the shape of your cookie
// }
//firestore data provider
// const options = {
//   watch: ['products'],
// }

//using firebase as the data provider

const db = getFirestore(app);
const productRef: any = collection(db, 'products');
const storage: any = getStorage();


const firebaseDataProvider: any = {
  getList: async (resource: string, params:any) => {

    //search filter is: params.filter.product_name
    //category filter is: params.filter.category
    // const data = await getDocs(productRef);
    // const products = data.docs.map(doc => ({...doc.data() as object, id: doc.id}));
    // const total = products.length;
    // console.log("params: ", params)
    // return {data: products, total};

    const data: any = await getDocs(productRef);
    const products: any = data.docs.map((doc: { data: () => any; id: any; }) => ({...doc.data(), id: doc.id}));
    console.log("products: ", products);
    
    //search filter
    if (params.filter.product_name && !params.filter.category) {
      const searchedProducts = products.filter((product: { product_name: string; }) => product.product_name.toLowerCase().includes(params.filter.product_name.toLowerCase()));
      return {data: searchedProducts, total: searchedProducts.length};
    }

    //category filter
    if (params.filter.category && !params.filter.product_name) {
      const categoryProducts = products.filter((product: { category: string; }) => product.category.toLowerCase().includes(params.filter.category.toLowerCase()));
      return {data: categoryProducts, total: categoryProducts.length};
    }

    //both search and category filter
    if (params.filter.product_name && params.filter.category) {
      const searchedCategoryProducts = products.filter((product: { product_name: string; category: string; }) => product.product_name.toLowerCase().includes(params.filter.product_name.toLowerCase()) && product.category.toLowerCase().includes(params.filter.category.toLowerCase()));
      return {data: searchedCategoryProducts, total: searchedCategoryProducts.length};
    }

    return {data: products, total: products.length};
  },
  getOne: async (resource: string, params: GetOneParams) => {
    const docRef = doc(productRef, params.id); // Get reference to the specific document 
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return { data: { ...docSnap.data() as object, id: docSnap.id } }; // Return single object 
    } else {
        throw new Error('Product not found'); // Handle case where product doesn't exist
    }
},
  getMany: async (resource: string) => {
    const data = await getDocs(productRef);
    const products = data.docs.map(doc => ({...doc.data() as object, id: doc.id}));
    return {data: products};
  },
  getManyReference: async (resource: string) => {
    const data = await getDocs(productRef);
    const products = data.docs.map(doc => ({...doc.data() as object, id: doc.id}));
    return {data: products};
  },
  create: async (resource: string, params: {data: any}) => {
    console.log("params: ", params)
    //params meta data
    let paramsData = params.data;
    paramsData['created_at'] = new Date().toISOString();
    //id is randomly generated by firebase
    paramsData['id'] = Math.random().toString(36).substring(7);
    console.log("paramsData: ", paramsData);

    //upload images to folder /images/product_images and /images/product_nutrition_facts_images in local storage
    //2 images which are product_image and product_nutrition_facts_image
    const productImageRef = ref(storage, '/images/product_images/' + paramsData.id + '.jpg');
    const productNutritionFactsImageRef = ref(storage, '/images/product_nutrition_facts_images/' + paramsData.id + '.jpg');
    //upload the images to the storage
    const productImageUploadTask: any = await uploadBytes(productImageRef, paramsData.product_image.rawFile, { contentType: 'image' });
    const productNutritionFactsImageUploadTask: any = await uploadBytes(productNutritionFactsImageRef, paramsData.product_nutrition_facts_image.rawFile , { contentType: 'image' });

    //delete the product_image and product_nutrition_facts_image from the paramsData
    delete paramsData.product_image;
    delete paramsData.product_nutrition_facts_image;


    //update the product_image and product_nutrition_facts_image to the url of the uploaded image

    //get the download url of the uploaded image
    const productImageUrl = await getDownloadURL(productImageUploadTask.ref);
    const productNutritionFactsImageUrl = await getDownloadURL(productNutritionFactsImageUploadTask.ref);

    //update the product_image and product_nutrition_facts_image to the url of the uploaded image

    console.log("productImageUrl: ", productImageUrl);
    console.log("productNutritionFactsImageUrl: ", productNutritionFactsImageUrl);


    
    paramsData['product_image'] =  productImageUrl;
    paramsData['product_nutrition_facts_image'] = productNutritionFactsImageUrl;

    console.log("productImageUploadTask: ", productImageUploadTask);
    console.log("productNutritionFactsImageUploadTask: ", productNutritionFactsImageUploadTask);

    console.log("paramsData after clean: ", paramsData)
    
    //add the data to the firestore database
    console.log("resourse: ", resource);
    console.log("productRef: ", productRef);
    const data = await addDoc(productRef, paramsData);
    
    return {data: paramsData};

    

  
  },
  update: async (resource: string) => {
    console.log("Resource:", resource); 
    const { id, ...rest } = resource as unknown as { id: string };
    console.log("ID:", id);
    console.log("Update Data:", rest);

    try {
        const docRef = doc(productRef, id); 
        const result = await updateDoc(docRef, rest);
        console.log("Update Result:", result); 
        return { data: result }; // Or return updated data if needed
   } catch (error) {
       console.error("Update Error:", error);
       throw error; // Re-throw error for React Admin to handle
   }
},
  updateMany: async (resource: any) => {
    const data = await updateDoc(productRef, resource);
    return {data};
  },
  delete: async (resource: string, params: any) => {
  //   console.log("Resource:", resource); 
  //   const { id, ...rest } = resource as unknown as { id: string };
  //   console.log("ID:", id);
  //   console.log("Delete Data:", rest);

  //   try {
  //       const docRef = doc(productRef, id); 
  //       const result = await deleteDoc(docRef);
  //       console.log("Delete Result:", result); 
  //       return { data: result }; // Or return updated data if needed
  //  } catch (error) {
  //      console.error("Delete Error:", error);
  //      throw error; // Re-throw error for React Admin to handle
  //  }

  console.log("resource:", resource);
  console.log("params:", params);

  try {
    const docRef = doc(productRef, params.id); 
    const result = await deleteDoc(docRef);
    console.log("Delete Result:", result); 
    return { data: result }; // Or return updated data if needed
  }
  catch (error) {
    console.error("Delete Error:", error);
    throw error; // Re-throw error for React Admin to handle
  }


  
  },
  deleteMany: async (resource: any, params: any) => {
    // const data = await deleteDoc(productRef);
    // return {data};
    console.log("Resource:", resource);
    console.log("Params:", params);

    params.ids.map(async (id: any) => {
      try {
        const docRef = doc(productRef, id); 
        const result = await deleteDoc(docRef);
        console.log("Delete Result:", result); 
        return { data: result }; // Or return updated data if needed
     } catch (error) {
         console.error("Delete Error:", error);
         throw error; // Re-throw error for React Admin to handle
     }
    });
    return {data: params.ids};
    
  },
}


const myTheme = {
  ...defaultTheme,
  palette: {
      mode: 'light',
      primary: indigo,
      secondary: cyan,
      error: red,
      //change the table color
      background: {

          paper: '#d8f9ff',
      },
  },
  typography: {
      // Use the system font instead of the default Roboto font.
      fontFamily: [
          '-apple-system',
          'BlinkMacSystemFont',
          '"Segoe UI"',
          'Arial',
          'sans-serif',
      ].join(','),
  },
  components: {
      ...defaultTheme.components,
      MuiTextField: {
          defaultProps: {
              variant: 'outlined' as const,
          },
      },
      MuiFormControl: {
          defaultProps: {
              variant: 'outlined' as const,
          },
      },
  },
};

function Dashboard() {
// check if the user is logged in from the cookies and firebase auth

  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const cookies = new Cookies();
    const adminToken = cookies.get('admin');
    if (adminToken) {
      setIsLoggedIn(true);
    } else {
      setIsLoggedIn(false);
    }
  }, []);
  console.log("isLoggedIn: ", isLoggedIn);


  return (
    <>
      {isLoggedIn ? ( 
        <Admin
        //  dataProvider={dataProvider}
        dataProvider={firebaseDataProvider}
         theme={myTheme}
         layout={MyLayout} >
          {/* its a custom firebase data provider */}
          <Resource name="products" list={ProductList} edit={EditGuesser} show={ProductList} create={ProductCreate} />

        </Admin>

      ) : (
        <div>
          <h1 style={{
            textAlign: 'center',
            marginTop: '20%',
            color: 'black'
          }}>Unauthorized</h1>
          <p
          style={
            {
              textAlign: 'center',
              color: 'black'
            }
          
          }>You are not authorized to view this page.</p>
          <Link href="/" passHref 
          style={{
            display: 'block',
            margin: 'auto',
            width: '100%',
            marginTop: '10px',
            textAlign: 'center'
          }}
          >
            <Button>Go back to home</Button>
          </Link>
        </div>
      )}
    </>
  );
}

export default Dashboard;
